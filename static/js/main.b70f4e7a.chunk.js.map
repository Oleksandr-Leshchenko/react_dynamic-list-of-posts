{"version":3,"sources":["components/PostRenderer/PostRenderer.tsx","components/PostsList/PostsList.tsx","api/api.ts","api/posts.ts","components/PostComments/PostComments.tsx","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","api/users.ts","App.tsx","index.tsx"],"names":["PostRenderer","post","isSelected","setSelectedPostId","userId","title","type","className","onClick","id","PostsList","posts","selectedPostId","map","BASE_URL","getUserPosts","a","ADDITIONAL_URL","fetch","response","json","getPostDetails","postId","getPostComments","console","error","PostComments","useState","comments","setComments","useEffect","fetchedComments","length","comment","commentId","COMMENT_URL","log","method","handleClick","body","NewCommentForm","emptyComment","name","email","setComment","handleInput","event","target","value","onSubmit","preventDefault","options","headers","JSON","stringify","placeholder","onChange","PostDetails","showComments","setShowComments","setPost","fetchedPost","getUsers","App","setPosts","users","setUsers","setUserId","Promise","all","fetchedPosts","fetchedUsers","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b70f4e7a.chunk.js","sourcesContent":["import React from 'react';\n\ninterface Props {\n  post: Post,\n  isSelected: boolean,\n  setSelectedPostId: React.Dispatch<React.SetStateAction<number | null>>,\n}\n\nexport const PostRenderer: React.FC<Props> = ({ post, isSelected, setSelectedPostId }) => {\n  return (\n    <>\n      <div>\n        <b>{`[User #${post.userId}]: `}</b>\n        {post.title}\n      </div>\n\n      {!isSelected ? (\n        <button\n          type=\"button\"\n          className=\"PostsList__button button\"\n          onClick={() => setSelectedPostId(post.id)}\n        >\n          Open\n        </button>\n      ) : (\n        <button\n          type=\"button\"\n          className=\"PostsList__button button\"\n          onClick={() => setSelectedPostId(null)}\n        >\n          Close\n        </button>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { PostRenderer } from '../PostRenderer';\nimport './PostsList.scss';\n\ninterface Props {\n  posts: Post[],\n  setSelectedPostId: React.Dispatch<React.SetStateAction<number | null>>,\n  selectedPostId: number | null,\n}\n\nexport const PostsList: React.FC<Props> = ({ posts, setSelectedPostId, selectedPostId }) => {\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          post && (\n            <li key={post.id} className=\"PostsList__item\">\n              <PostRenderer\n                post={post}\n                isSelected={post.id === selectedPostId}\n                setSelectedPostId={setSelectedPostId}\n              />\n            </li>\n          )))}\n      </ul>\n    </div>\n  );\n};\n","export const BASE_URL = 'https://mate.academy/students-api';\n","/* eslint-disable no-console */\nimport { BASE_URL } from './api';\n\nexport const getUserPosts = async (userId: number | null) => {\n  let ADDITIONAL_URL: string;\n\n  if (userId) {\n    ADDITIONAL_URL = `/posts?userId=${userId}`;\n  } else {\n    ADDITIONAL_URL = '/posts';\n  }\n\n  const response = await fetch(`${BASE_URL}${ADDITIONAL_URL}`);\n\n  return response.json();\n};\n\nexport const getPostDetails = async (postId: number | null) => {\n  if (postId === null) {\n    return null;\n  }\n\n  const response = await fetch(`${BASE_URL}/posts?id=${postId}`);\n\n  return response.json();\n};\n\nexport const getPostComments = async (postId: number | null) => {\n  if (postId === null) {\n    return [];\n  }\n\n  try {\n    const response = await fetch(`${BASE_URL}/comments?postId=${postId}`);\n\n    return await response.json();\n  } catch (error) {\n    console.error(error);\n\n    return [];\n  }\n};\n","/* eslint-disable no-console */\nimport React, { useState, useEffect } from 'react';\nimport { getPostComments } from '../../api/posts';\n\ninterface Props {\n  postId: number | null,\n}\n\nexport const PostComments: React.FC<Props> = ({ postId }) => {\n  const [comments, setComments] = useState<ServerComment[]>([]);\n\n  useEffect(() => {\n    (async function fetchData() {\n      const fetchedComments = await getPostComments(postId);\n\n      setComments(fetchedComments);\n    }());\n  }, [comments]);\n\n  const handleClick = (commentId: number) => {\n    const COMMENT_URL = `https://mate.academy/students-api/comments/${commentId}`;\n\n    console.log(COMMENT_URL);\n\n    fetch(COMMENT_URL, { method: 'DELETE' });\n  };\n\n  return (\n    <>\n      {comments.length !== 0 ? (\n        comments.map(comment => (\n          <li key={comment.id} className=\"PostDetails__list-item\">\n            <button\n              type=\"button\"\n              className=\"PostDetails__remove-button button\"\n              onClick={() => handleClick(comment.id)}\n            >\n              X\n            </button>\n            <p>{comment.body}</p>\n          </li>\n        ))\n      ) : (\n        <div>No comments</div>\n      )}\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\n\ninterface Props {\n  postId: number,\n}\n\nexport const NewCommentForm: React.FC<Props> = ({ postId }) => {\n  const emptyComment: ServerComment = {\n    name: '',\n    email: '',\n    body: '',\n    id: 1,\n    postId,\n  };\n\n  const [comment, setComment] = useState<ServerComment>(emptyComment);\n\n  const handleInput = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = event.target;\n\n    setComment({\n      ...comment,\n      [name]: value,\n    });\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const COMMENTS_URL = 'https://mate.academy/students-api/comments';\n    const options = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json; charset=UTF-8',\n      },\n      body: JSON.stringify(comment),\n    };\n\n    setComment(emptyComment);\n    fetch(COMMENTS_URL, options);\n  };\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={comment.name}\n          onChange={handleInput}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={comment.email}\n          onChange={handleInput}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={comment.body}\n          onChange={handleInput}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","/* eslint-disable no-console */\nimport React, { useEffect, useState } from 'react';\nimport { PostComments } from '../PostComments';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { getPostDetails } from '../../api/posts';\n\ninterface Props {\n  postId: number | null,\n}\n\nexport const PostDetails: React.FC<Props> = ({ postId }) => {\n  const [showComments, setShowComments] = useState<boolean>(true);\n  const [post, setPost] = useState<Post | null>(null);\n\n  useEffect(() => {\n    (async function fetchData() {\n      const fetchedPost = await getPostDetails(postId);\n\n      setPost(fetchedPost ? fetchedPost[0] : null);\n    }());\n  }, [postId]);\n\n  const handleClick = () => (showComments ? setShowComments(false) : setShowComments(true));\n\n  return (\n    post ? (\n      <div className=\"PostDetails\">\n        <h2>Post details:</h2>\n\n        <section className=\"PostDetails__post\">\n          <p>{post.body}</p>\n        </section>\n\n        <section className=\"PostDetails__comments\">\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={handleClick}\n          >\n            {showComments ? 'Hide comments' : 'Show comments'}\n          </button>\n\n          <ul className=\"PostDetails__list\">\n            {showComments && <PostComments postId={postId} />}\n          </ul>\n        </section>\n\n        <section>\n          <div className=\"PostDetails__form-wrapper\">\n            <NewCommentForm postId={post.id} />\n          </div>\n        </section>\n      </div>\n    ) : (\n      <div>No post selected</div>\n    )\n  );\n};\n","import { BASE_URL } from './api';\n\nexport const getUsers = async () => {\n  const response = await fetch(`${BASE_URL}/users`);\n\n  return response.json();\n};\n","/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUserPosts } from './api/posts';\nimport { getUsers } from './api/users';\n\nconst App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [users, setUsers] = useState<User[]>([]);\n  const [userId, setUserId] = useState<number | null>(null);\n  const [selectedPostId, setSelectedPostId] = useState<number | null>(null);\n\n  useEffect(() => {\n    (async function fetchData() {\n      const [fetchedPosts, fetchedUsers] = await Promise.all([\n        getUserPosts(userId),\n        getUsers(),\n      ]);\n\n      setPosts(fetchedPosts);\n      setUsers(fetchedUsers);\n    }());\n  }, [userId, selectedPostId]);\n\n  const handleChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setUserId(+event.target.value);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={`${userId}`}\n            onChange={handleChange}\n          >\n            <option key=\"0\" value=\"\">All users</option>\n            {users.map(user => (\n              <option\n                key={user.id}\n                value={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            setSelectedPostId={setSelectedPostId}\n            selectedPostId={selectedPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <PostDetails\n            postId={selectedPostId}\n          />\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}