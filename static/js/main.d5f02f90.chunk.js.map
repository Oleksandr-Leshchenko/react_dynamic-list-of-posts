{"version":3,"sources":["components/PostRenderer/PostRenderer.tsx","components/PostsList/PostsList.tsx","api/api.ts","api/posts.ts","components/PostComments/PostComments.tsx","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","api/users.ts","App.tsx","index.tsx"],"names":["PostRenderer","post","isSelected","setSelectedPostId","userId","title","type","className","onClick","id","PostsList","posts","selectedPostId","map","BASE_URL","getUserPosts","a","ADDITIONAL_URL","fetch","response","json","getPostDetails","postId","getPostComments","console","error","PostComments","showComments","useState","comments","setComments","useEffect","fetchedComments","fetchData","length","comment","commentId","COMMENT_URL","log","method","handleClick","body","NewCommentForm","emptyComment","name","email","setComment","handleInput","event","target","value","handleSubmit","preventDefault","options","headers","JSON","stringify","onSubmit","placeholder","onChange","PostDetails","setShowComments","setPost","fetchedPost","getUsers","App","setPosts","users","setUsers","setUserId","Promise","all","fetchedPosts","fetchedUsers","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d5f02f90.chunk.js","sourcesContent":["import React from 'react';\n\ninterface Props {\n  post: Post,\n  isSelected: boolean,\n  setSelectedPostId: React.Dispatch<React.SetStateAction<number>>,\n}\n\nexport const PostRenderer: React.FC<Props> = ({ post, isSelected, setSelectedPostId }) => {\n  return (\n    <>\n      <div>\n        <b>{`[User #${post.userId}]: `}</b>\n        {post.title}\n      </div>\n\n      {!isSelected ? (\n        <button\n          type=\"button\"\n          className=\"PostsList__button button\"\n          onClick={() => setSelectedPostId(post.id)}\n        >\n          Open\n        </button>\n      ) : (\n        <button\n          type=\"button\"\n          className=\"PostsList__button button\"\n          onClick={() => setSelectedPostId(0)}\n        >\n          Close\n        </button>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { PostRenderer } from '../PostRenderer';\nimport './PostsList.scss';\n\ninterface Props {\n  posts: Post[],\n  setSelectedPostId: React.Dispatch<React.SetStateAction<number>>,\n  selectedPostId: number,\n}\n\nexport const PostsList: React.FC<Props> = ({ posts, setSelectedPostId, selectedPostId }) => {\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          post && (\n            <li key={post.id} className=\"PostsList__item\">\n              <PostRenderer\n                post={post}\n                isSelected={post.id === selectedPostId}\n                setSelectedPostId={setSelectedPostId}\n              />\n            </li>\n          )))}\n      </ul>\n    </div>\n  );\n};\n","export const BASE_URL = 'https://mate.academy/students-api';\n","/* eslint-disable no-console */\nimport { BASE_URL } from './api';\n\nexport const getUserPosts = async (userId: number) => {\n  let ADDITIONAL_URL: string;\n\n  if (userId) {\n    ADDITIONAL_URL = `/posts?userId=${userId}`;\n  } else {\n    ADDITIONAL_URL = '/posts';\n  }\n\n  const response = await fetch(`${BASE_URL}${ADDITIONAL_URL}`);\n\n  return response.json();\n};\n\nexport const getPostDetails = async (postId: number) => {\n  if (!postId) {\n    return postId;\n  }\n\n  const response = await fetch(`${BASE_URL}/posts?id=${postId}`);\n\n  return response.json();\n};\n\nexport const getPostComments = async (postId: number) => {\n  if (!postId) {\n    return [];\n  }\n\n  try {\n    const response = await fetch(`${BASE_URL}/comments?postId=${postId}`);\n\n    return await response.json();\n  } catch (error) {\n    console.error(error);\n\n    return [];\n  }\n};\n","/* eslint-disable no-console */\nimport React, { useState, useEffect } from 'react';\nimport { getPostComments } from '../../api/posts';\n\ninterface Props {\n  postId: number,\n  showComments: boolean,\n}\n\nexport const PostComments: React.FC<Props> = ({ postId, showComments }) => {\n  const [comments, setComments] = useState<ServerComment[]>([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const fetchedComments = await getPostComments(postId);\n\n      setComments(fetchedComments);\n    }\n\n    fetchData();\n  }, [comments]);\n\n  const handleClick = (commentId: number) => {\n    const COMMENT_URL = `https://mate.academy/students-api/comments/${commentId}`;\n\n    console.log(COMMENT_URL);\n\n    fetch(COMMENT_URL, { method: 'DELETE' });\n  };\n\n  if (!showComments) {\n    return <div>Comments are hidden</div>;\n  }\n\n  return (\n    <>\n      {comments.length !== 0 ? (\n        comments.map(comment => (\n          <li key={comment.id} className=\"PostDetails__list-item\">\n            <button\n              type=\"button\"\n              className=\"PostDetails__remove-button button\"\n              onClick={() => handleClick(comment.id)}\n            >\n              X\n            </button>\n            <p>{comment.body}</p>\n          </li>\n        ))\n      ) : (\n        <div>No comments</div>\n      )}\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\n\ninterface Props {\n  postId: number,\n}\n\nexport const NewCommentForm: React.FC<Props> = ({ postId }) => {\n  const emptyComment: ServerComment = {\n    name: '',\n    email: '',\n    body: '',\n    id: 2,\n    postId,\n  };\n\n  const [comment, setComment] = useState<ServerComment>(emptyComment);\n\n  const handleInput = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = event.target;\n\n    setComment({\n      ...comment,\n      [name]: value,\n    });\n  };\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const COMMENTS_URL = 'https://mate.academy/students-api/comments';\n    const options = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json; charset=UTF-8',\n      },\n      body: JSON.stringify(comment),\n    };\n\n    setComment(emptyComment);\n    await fetch(COMMENTS_URL, options);\n  };\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={comment.name}\n          onChange={handleInput}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={comment.email}\n          onChange={handleInput}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={comment.body}\n          onChange={handleInput}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","/* eslint-disable no-console */\nimport React, { useEffect, useState } from 'react';\nimport { PostComments } from '../PostComments';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { getPostDetails } from '../../api/posts';\n\ninterface Props {\n  postId: number,\n}\n\nexport const PostDetails: React.FC<Props> = ({ postId }) => {\n  const [showComments, setShowComments] = useState<boolean>(true);\n  const [post, setPost] = useState<Post | null>(null);\n\n  useEffect(() => {\n    (async function fetchData() {\n      const fetchedPost = await getPostDetails(postId);\n\n      setPost(fetchedPost ? fetchedPost[0] : null);\n    }());\n  }, [postId]);\n\n  const handleClick = () => setShowComments(!showComments);\n\n  return (\n    post ? (\n      <div className=\"PostDetails\">\n        <h2>Post details:</h2>\n\n        <section className=\"PostDetails__post\">\n          <p>{post.body}</p>\n        </section>\n\n        <section className=\"PostDetails__comments\">\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={handleClick}\n          >\n            {showComments ? 'Hide comments' : 'Show comments'}\n          </button>\n\n          <ul className=\"PostDetails__list\">\n            <PostComments postId={postId} showComments={showComments} />\n          </ul>\n        </section>\n\n        <section>\n          <div className=\"PostDetails__form-wrapper\">\n            <NewCommentForm postId={post.id} />\n          </div>\n        </section>\n      </div>\n    ) : (\n      <div>No post selected</div>\n    )\n  );\n};\n","import { BASE_URL } from './api';\n\nexport const getUsers = async () => {\n  const response = await fetch(`${BASE_URL}/users`);\n\n  return response.json();\n};\n","/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUserPosts } from './api/posts';\nimport { getUsers } from './api/users';\n\nconst App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [users, setUsers] = useState<User[]>([]);\n  const [userId, setUserId] = useState<number>(0);\n  const [selectedPostId, setSelectedPostId] = useState<number>(0);\n\n  useEffect(() => {\n    (async function fetchData() {\n      const [fetchedPosts, fetchedUsers] = await Promise.all([\n        getUserPosts(userId),\n        getUsers(),\n      ]);\n\n      setPosts(fetchedPosts);\n      setUsers(fetchedUsers);\n    }());\n  }, [userId, selectedPostId]);\n\n  const handleChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setUserId(+event.target.value);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={`${userId}`}\n            onChange={handleChange}\n          >\n            <option key=\"0\" value=\"\">All users</option>\n            {users.map(user => (\n              <option\n                key={user.id}\n                value={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            setSelectedPostId={setSelectedPostId}\n            selectedPostId={selectedPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <PostDetails\n            postId={selectedPostId}\n          />\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}